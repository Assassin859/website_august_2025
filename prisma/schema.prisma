// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

model User {
	id           String   @id @default(uuid())
	email        String   @unique
	passwordHash String
	role         Role     @default(VIEWER)
	firstName    String?
	lastName     String?
	companyId    String?
	company      Company? @relation(fields: [companyId], references: [id])
	isVerified   Boolean  @default(false)
	createdAt    DateTime @default(now())
	updatedAt    DateTime @updatedAt
}

enum Role {
	ADMIN
	COMPANY
	VIEWER
}

model Company {
	id              String     @id @default(uuid())
	name            String
	country         String     @default("DE")
	address         String?
	phone           String?
	email           String?
	website         String?
	isVerified      Boolean    @default(false)
	users           User[]
	products        Product[]
	shipments       Shipment[]
	sensors         Sensor[]
	alerts          Alert[]
	complianceFiles ComplianceReport[]
	createdAt       DateTime   @default(now())
	updatedAt       DateTime   @updatedAt
}

model Product {
	id           String    @id @default(uuid())
	name         String
	gtin         String    @unique
	description  String?
	manufacturer Company   @relation(fields: [manufacturerId], references: [id])
	manufacturerId String
	batches      Batch[]
	auditLogs    AuditLog[]
	sensors      Sensor[]
	createdAt    DateTime  @default(now())
	updatedAt    DateTime  @updatedAt
}

model Batch {
	id          String   @id @default(uuid())
	batchNumber String
	expiryDate  DateTime
	product     Product  @relation(fields: [productId], references: [id])
	productId   String
	status      BatchStatus @default(PRODUCED)
	currentLocation String?
	shipments   Shipment[]
	createdAt   DateTime @default(now())
	updatedAt   DateTime @updatedAt

	@@unique([productId, batchNumber])
}

enum BatchStatus {
	PRODUCED
	IN_TRANSIT
	AT_WAREHOUSE
	DELIVERED
	RECALLED
}

model Shipment {
	id          String   @id @default(uuid())
	reference   String   @unique
	batch       Batch    @relation(fields: [batchId], references: [id])
	batchId     String
	origin      String
	destination String
	status      ShipmentStatus @default(CREATED)
	checkpoints Json[]
	company     Company  @relation(fields: [companyId], references: [id])
	companyId   String
	sensors     Sensor[] @relation("SensorShipments")
	alerts      Alert[]
	createdAt   DateTime @default(now())
	updatedAt   DateTime @updatedAt
}

enum ShipmentStatus {
	CREATED
	IN_TRANSIT
	DELIVERED
	DELAYED
	CANCELLED
}

model Sensor {
	id          String   @id @default(uuid())
	serial      String   @unique
	company     Company  @relation(fields: [companyId], references: [id])
	companyId   String
	productId   String?
	product     Product? @relation(fields: [productId], references: [id])
	shipments   Shipment[] @relation("SensorShipments")
	readings    SensorReading[]
	alerts      Alert[]
	createdAt   DateTime @default(now())
	updatedAt   DateTime @updatedAt
}

model SensorReading {
	id        String   @id @default(uuid())
	sensor    Sensor   @relation(fields: [sensorId], references: [id])
	sensorId  String
	temperature Float
	humidity    Float?
	latitude    Float?
	longitude   Float?
	createdAt DateTime @default(now())
}

model Alert {
	id        String   @id @default(uuid())
	type      AlertType
	message   String
	company   Company  @relation(fields: [companyId], references: [id])
	companyId String
	shipment  Shipment? @relation(fields: [shipmentId], references: [id])
	shipmentId String?
	sensor    Sensor? @relation(fields: [sensorId], references: [id])
	sensorId  String?
	resolved  Boolean  @default(false)
	createdAt DateTime @default(now())
}

enum AlertType {
	TEMP_BREACH
	HUMIDITY_BREACH
	COUNTERFEIT_SUSPECT
	DELIVERY_DELAY
}

model AuditLog {
	id        String   @id @default(uuid())
	product   Product  @relation(fields: [productId], references: [id])
	productId String
	action    String
	actorId   String
	metadata  Json?
	createdAt DateTime @default(now())
}

model ComplianceReport {
	id        String   @id @default(uuid())
	company   Company  @relation(fields: [companyId], references: [id])
	companyId String
	type      String
	filePath  String
	createdAt DateTime @default(now())
}
